=pod

=encoding UTF-8

=head1 NAME

SkewHeap::PP - a fast and flexible heap structure

=head1 VERSION

version 0.01

=head1 SYNOPSIS

=head1 DESCRIPTION

A skew heap is a memory efficient, self-adjusting heap with an amortized
performance of O(log n) or better. C<SkewHeap:PP> is implemented in pure perl,
yet performs comparably to L<SkewHeap>.

The key feature of a skew heap is the ability to quickly and efficiently merge
two heaps together.

=head2 skew

Creates a new skew heap. Requires a single argument, a code block that knows how
to prioritize the values to be stored in the heap.

  my $heap = skew{ $_[0] <=> $_[1] };

=head2 skew_count

Returns the number of elements in the heap.

=head2 skew_is_empty

Returns true if the heap is empty.

=head2 skew_peek

Returns the top element in the heap without removing it from the heap.

=head2 skew_take

Removes and returns the top element from the heap.

  my $item = skew_take $heap;

Optionally, multiple elements may be returned from the heap by passing the
desired number of elements, in which case a list is returned, rather than a
single, scalar element. If there are fewer elements available than requested,
as many as a immediately available are returned.

  # Get 10 elements
  my @items = skew_take $heap, 10;

=head2 skew_put

Adds one or more items to the heap.

  skew_put $s, 42;
  skew_put $s, 42, 6, 8;

=head2 skew_merge

Merges any number of heaps into the first argument I<destructively>. After
merging, the first heap passed in will contain all of the items in the heaps
passed in subsequent arguments. After merging, the subsequent heaps will be
empty. The comparison function used for ordering is that of the first heap
passed in. The return value is the first heap into which the other heaps were
merged.

  skew_merge $x, $y, $z; # $x contains all elements of $x, $y, and $z;
                         # $y and $z are now empty.

=head1 OBJECT INTERFACE

An object interface is provided that maps directly to the similarly named
C<skew_*> routines.

=head2 new

=head2 count

=head2 is_empty

=head2 peek

=head2 take

=head2 put

=head2 merge

=head1 PERFORMANCE VS L<SkewHeap>

C<SkewHeap::PP> outperforms L<SkewHeap> by a significant margin. I'm still
trying to determine the root cause of this, and welcome suggestions and
explanations.

These numbers test the cost of one C<put()> and one C<take()> against a skew
heap of varying initial size. The value being inserted is the median value of
the elements already present in the heap to ensure that C<merge()> is fully
exercised. They were generated with C<perl v5.30.2>.

  ------------------------------------------------------------------------------
  - put() and take() 1 item with skew heap containing 50,000 nodes
  ------------------------------------------------------------------------------
          Rate   xs   pp
  xs  442478/s   -- -60%
  pp 1111111/s 151%   --

  ------------------------------------------------------------------------------
  - put() and take() 1 item with skew heap containing 100,000 nodes
  ------------------------------------------------------------------------------
          Rate   xs   pp
  xs  243902/s   -- -76%
  pp 1020408/s 318%   --

  ------------------------------------------------------------------------------
  - put() and take() 1 item with skew heap containing 500,000 nodes
  ------------------------------------------------------------------------------
         Rate    xs    pp
  xs  50100/s    --  -92%
  pp 625000/s 1148%    --

=head1 AUTHOR

Jeff Ober <sysread@fastmail.fm>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2020 by Jeff Ober.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
